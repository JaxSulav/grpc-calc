// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package calc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalculatorClient is the client API for Calculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculatorClient interface {
	SumService(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error)
	PrimeService(ctx context.Context, in *PrimeRequest, opts ...grpc.CallOption) (Calculator_PrimeServiceClient, error)
	AverageService(ctx context.Context, opts ...grpc.CallOption) (Calculator_AverageServiceClient, error)
	FindMaxService(ctx context.Context, opts ...grpc.CallOption) (Calculator_FindMaxServiceClient, error)
}

type calculatorClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculatorClient(cc grpc.ClientConnInterface) CalculatorClient {
	return &calculatorClient{cc}
}

func (c *calculatorClient) SumService(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error) {
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, "/calculator/SumService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) PrimeService(ctx context.Context, in *PrimeRequest, opts ...grpc.CallOption) (Calculator_PrimeServiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &Calculator_ServiceDesc.Streams[0], "/calculator/PrimeService", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorPrimeServiceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Calculator_PrimeServiceClient interface {
	Recv() (*PrimeResponse, error)
	grpc.ClientStream
}

type calculatorPrimeServiceClient struct {
	grpc.ClientStream
}

func (x *calculatorPrimeServiceClient) Recv() (*PrimeResponse, error) {
	m := new(PrimeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorClient) AverageService(ctx context.Context, opts ...grpc.CallOption) (Calculator_AverageServiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &Calculator_ServiceDesc.Streams[1], "/calculator/AverageService", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorAverageServiceClient{stream}
	return x, nil
}

type Calculator_AverageServiceClient interface {
	Send(*AverageRequest) error
	CloseAndRecv() (*AverageResponse, error)
	grpc.ClientStream
}

type calculatorAverageServiceClient struct {
	grpc.ClientStream
}

func (x *calculatorAverageServiceClient) Send(m *AverageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorAverageServiceClient) CloseAndRecv() (*AverageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AverageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorClient) FindMaxService(ctx context.Context, opts ...grpc.CallOption) (Calculator_FindMaxServiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &Calculator_ServiceDesc.Streams[2], "/calculator/FindMaxService", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorFindMaxServiceClient{stream}
	return x, nil
}

type Calculator_FindMaxServiceClient interface {
	Send(*FindMaxRequest) error
	Recv() (*FindMaxResponse, error)
	grpc.ClientStream
}

type calculatorFindMaxServiceClient struct {
	grpc.ClientStream
}

func (x *calculatorFindMaxServiceClient) Send(m *FindMaxRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorFindMaxServiceClient) Recv() (*FindMaxResponse, error) {
	m := new(FindMaxResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculatorServer is the server API for Calculator service.
// All implementations must embed UnimplementedCalculatorServer
// for forward compatibility
type CalculatorServer interface {
	SumService(context.Context, *SumRequest) (*SumResponse, error)
	PrimeService(*PrimeRequest, Calculator_PrimeServiceServer) error
	AverageService(Calculator_AverageServiceServer) error
	FindMaxService(Calculator_FindMaxServiceServer) error
	mustEmbedUnimplementedCalculatorServer()
}

// UnimplementedCalculatorServer must be embedded to have forward compatible implementations.
type UnimplementedCalculatorServer struct {
}

func (UnimplementedCalculatorServer) SumService(context.Context, *SumRequest) (*SumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SumService not implemented")
}
func (UnimplementedCalculatorServer) PrimeService(*PrimeRequest, Calculator_PrimeServiceServer) error {
	return status.Errorf(codes.Unimplemented, "method PrimeService not implemented")
}
func (UnimplementedCalculatorServer) AverageService(Calculator_AverageServiceServer) error {
	return status.Errorf(codes.Unimplemented, "method AverageService not implemented")
}
func (UnimplementedCalculatorServer) FindMaxService(Calculator_FindMaxServiceServer) error {
	return status.Errorf(codes.Unimplemented, "method FindMaxService not implemented")
}
func (UnimplementedCalculatorServer) mustEmbedUnimplementedCalculatorServer() {}

// UnsafeCalculatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculatorServer will
// result in compilation errors.
type UnsafeCalculatorServer interface {
	mustEmbedUnimplementedCalculatorServer()
}

func RegisterCalculatorServer(s grpc.ServiceRegistrar, srv CalculatorServer) {
	s.RegisterService(&Calculator_ServiceDesc, srv)
}

func _Calculator_SumService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).SumService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator/SumService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).SumService(ctx, req.(*SumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_PrimeService_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalculatorServer).PrimeService(m, &calculatorPrimeServiceServer{stream})
}

type Calculator_PrimeServiceServer interface {
	Send(*PrimeResponse) error
	grpc.ServerStream
}

type calculatorPrimeServiceServer struct {
	grpc.ServerStream
}

func (x *calculatorPrimeServiceServer) Send(m *PrimeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Calculator_AverageService_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServer).AverageService(&calculatorAverageServiceServer{stream})
}

type Calculator_AverageServiceServer interface {
	SendAndClose(*AverageResponse) error
	Recv() (*AverageRequest, error)
	grpc.ServerStream
}

type calculatorAverageServiceServer struct {
	grpc.ServerStream
}

func (x *calculatorAverageServiceServer) SendAndClose(m *AverageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorAverageServiceServer) Recv() (*AverageRequest, error) {
	m := new(AverageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Calculator_FindMaxService_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServer).FindMaxService(&calculatorFindMaxServiceServer{stream})
}

type Calculator_FindMaxServiceServer interface {
	Send(*FindMaxResponse) error
	Recv() (*FindMaxRequest, error)
	grpc.ServerStream
}

type calculatorFindMaxServiceServer struct {
	grpc.ServerStream
}

func (x *calculatorFindMaxServiceServer) Send(m *FindMaxResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorFindMaxServiceServer) Recv() (*FindMaxRequest, error) {
	m := new(FindMaxRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Calculator_ServiceDesc is the grpc.ServiceDesc for Calculator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Calculator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator",
	HandlerType: (*CalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SumService",
			Handler:    _Calculator_SumService_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PrimeService",
			Handler:       _Calculator_PrimeService_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AverageService",
			Handler:       _Calculator_AverageService_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FindMaxService",
			Handler:       _Calculator_FindMaxService_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "calculator.proto",
}
