# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import calculator_pb2 as calculator__pb2


class calculatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SumService = channel.unary_unary(
                '/calculator/SumService',
                request_serializer=calculator__pb2.SumRequest.SerializeToString,
                response_deserializer=calculator__pb2.SumResponse.FromString,
                )
        self.PrimeService = channel.unary_stream(
                '/calculator/PrimeService',
                request_serializer=calculator__pb2.PrimeRequest.SerializeToString,
                response_deserializer=calculator__pb2.PrimeResponse.FromString,
                )
        self.AverageService = channel.stream_unary(
                '/calculator/AverageService',
                request_serializer=calculator__pb2.AverageRequest.SerializeToString,
                response_deserializer=calculator__pb2.AverageResponse.FromString,
                )
        self.FindMaxService = channel.stream_stream(
                '/calculator/FindMaxService',
                request_serializer=calculator__pb2.FindMaxRequest.SerializeToString,
                response_deserializer=calculator__pb2.FindMaxResponse.FromString,
                )


class calculatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SumService(self, request, context):
        """Unary
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PrimeService(self, request, context):
        """Server Streaming
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AverageService(self, request_iterator, context):
        """Client Streaming
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindMaxService(self, request_iterator, context):
        """Bidirectional Streaming
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_calculatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SumService': grpc.unary_unary_rpc_method_handler(
                    servicer.SumService,
                    request_deserializer=calculator__pb2.SumRequest.FromString,
                    response_serializer=calculator__pb2.SumResponse.SerializeToString,
            ),
            'PrimeService': grpc.unary_stream_rpc_method_handler(
                    servicer.PrimeService,
                    request_deserializer=calculator__pb2.PrimeRequest.FromString,
                    response_serializer=calculator__pb2.PrimeResponse.SerializeToString,
            ),
            'AverageService': grpc.stream_unary_rpc_method_handler(
                    servicer.AverageService,
                    request_deserializer=calculator__pb2.AverageRequest.FromString,
                    response_serializer=calculator__pb2.AverageResponse.SerializeToString,
            ),
            'FindMaxService': grpc.stream_stream_rpc_method_handler(
                    servicer.FindMaxService,
                    request_deserializer=calculator__pb2.FindMaxRequest.FromString,
                    response_serializer=calculator__pb2.FindMaxResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'calculator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class calculator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SumService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calculator/SumService',
            calculator__pb2.SumRequest.SerializeToString,
            calculator__pb2.SumResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PrimeService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/calculator/PrimeService',
            calculator__pb2.PrimeRequest.SerializeToString,
            calculator__pb2.PrimeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AverageService(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/calculator/AverageService',
            calculator__pb2.AverageRequest.SerializeToString,
            calculator__pb2.AverageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindMaxService(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/calculator/FindMaxService',
            calculator__pb2.FindMaxRequest.SerializeToString,
            calculator__pb2.FindMaxResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
